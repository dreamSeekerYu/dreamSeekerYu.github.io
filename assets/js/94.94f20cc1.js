(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{452:function(t,e,a){"use strict";a.r(e);var s=a(46),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("react")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/w-x-XfLkAwNGuqn4lfpV4Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("值得推荐的8个 React 库"),a("OutboundLink")],1)]),t._v(" "),a("ol",[a("li",[a("p",[t._v("React Lazyload   懒加载图片，组件")])]),t._v(" "),a("li",[a("p",[t._v("React Responsive\n提供了一种方便的方法来在 React 中包含媒体查询。这个库同时提供了一个可以使用的钩子和一个组件——分别是 useMediaQuery 钩子和 MediaQuery 组件。\n这个库允许你为你的应用程序创建可以轻松重用的特定断点")])]),t._v(" "),a("li",[a("p",[t._v("React Beautiful DnD  不仅支持纵向和横向列表移动，还允许你在列表之间拖放列表项。这个库的特性清单几乎是无穷无尽的：它包括有条件的拖放，还支持鼠标、键盘和触摸屏。这是拖放领域目前为止最完善的库。")])]),t._v(" "),a("li",[a("p",[t._v("Styled Components")])])]),t._v(" "),a("p",[t._v("Styled Components 库是这个类目中最流行的库，GitHub 上有超过 32K 的星星。这个库允许你在 React 组件中使用纯 CSS 设置你的组件样式")]),t._v(" "),a("p",[t._v("父子传参  props\n事件传递  直接传递给子元素，子元素直接调用")]),t._v(" "),a("h4",{attrs:{id:"react-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-事件"}},[t._v("#")]),t._v(" react  事件")]),t._v(" "),a("p",[t._v("驼峰命名法")]),t._v(" "),a("p",[t._v("redux/dva + ts 时候  每个函数和变量都需要申明的")]),t._v(" "),a("p",[t._v("react-dnd 拖拽组件库")]),t._v(" "),a("p",[t._v("react 没有指令 过滤器 之类的功能性 api，所以需要分装成组件的形式来实现，比如 多行文本的省略号，按钮级的权限等等")]),t._v(" "),a("p",[t._v(".fast-show {\ncontent-visibility: auto;\ncontain-intrinsic-size: 200px;\n}")]),t._v(" "),a("h4",{attrs:{id:"复习原生事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复习原生事件"}},[t._v("#")]),t._v(" 复习原生事件")]),t._v(" "),a("p",[t._v("1.DOM0级事件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1)只支持冒泡\n\n2)兼容性好\n\n3)只能绑定一次\n")])])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("el.onclick = function(){}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("2.DOM2级事件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1)支持捕获和冒泡\n")])])]),a("blockquote",[a("p",[t._v("事件三要素：1>事件源 2>事件类型  3>事件处理器（事件监听器）")])]),t._v(" "),a("blockquote",[a("p",[t._v("事件流：捕获  冒泡")])]),t._v(" "),a("p",[t._v("el.addEventListener('click',function(){},false/true)  false:冒泡  true：捕获")]),t._v(" "),a("html",[a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b1e96bb2fdece2915057c3bab3664f72/xmlnote/D9333310460E44519DA57B8056AC9A06/28175",width:"400"}})]),t._v(" "),a("h4",{attrs:{id:"一、在react中使用原生事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、在react中使用原生事件"}},[t._v("#")]),t._v(" 一、在react中使用原生事件")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("handClick(){}\n\n在componentDidMount(){\n    //添加事件\n    this.refs.title.addEventListener('click',this.handClick,false)\n}\n\n在componentWillUnMount(){\n    //移除事件  防止内存泄漏\n    this.refs.title.removeEventListener('click',this.handClick,false)\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("h4",{attrs:{id:"二、合成事件的绑定方式和实现机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、合成事件的绑定方式和实现机制"}},[t._v("#")]),t._v(" 二、合成事件的绑定方式和实现机制")]),t._v(" "),a("p",[t._v("在成员方法内部没有this，需要修改this指向")]),t._v(" "),a("html",[a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b1e96bb2fdece2915057c3bab3664f72/xmlnote/00C66649EE4C4200881CB62B1D38D5AB/28128",width:"500"}}),t._v(" "),a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b1e96bb2fdece2915057c3bab3664f72/xmlnote/D30F27BFE94D4B1BA48C8C323405F9B8/28151",width:"500"}}),t._v(" "),a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b1e96bb2fdece2915057c3bab3664f72/xmlnote/C6644631B70443308D403F8A2CF0C263/28147",width:"500"}}),t._v(" "),a("img",{attrs:{src:"https://note.youdao.com/yws/public/resource/b1e96bb2fdece2915057c3bab3664f72/xmlnote/D8F0225749334AEB871B10700217189D/28130",width:"500"}})]),t._v(" "),a("p",[a("strong",[t._v("react并没有给每个真实的DOM节点去添加事件，而是仅仅给最顶层节点（document）添加了一个事件处理器，因为事件传递机制，在任何元素上触发的事件都会触发该事件处理器的执行。")]),t._v("\n然后在该事件处理器内我们再根据触发的实际情况去调用真正的事件的事件处理函数。\n这样的话，我们只有一个事件处理器，但是却完成了所有的任务，大大的提高了性能。")]),t._v(" "),a("p",[a("strong",[t._v("注：react合成事件系统也实现了一套捕获和冒泡的机制。")])]),t._v(" "),a("h4",{attrs:{id:"三、react合成事件和原生事件可以混用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、react合成事件和原生事件可以混用"}},[t._v("#")]),t._v(" 三、react合成事件和原生事件可以混用")]),t._v(" "),a("p",[t._v("在react合成事件内阻止事件传递时，不会影响对原生的事件产生影响。")]),t._v(" "),a("p",[t._v("如果在原生事件内阻止事件的传递，则不会触发document上的事件处理器则不会触发，意味着所有的react合成事件都不会触发。")]),t._v(" "),a("h4",{attrs:{id:"四、react已经帮我们处理了事件的兼容性问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、react已经帮我们处理了事件的兼容性问题。"}},[t._v("#")]),t._v(" 四、react已经帮我们处理了事件的兼容性问题。")]),t._v(" "),a("h4",{attrs:{id:"五、获取事件对象的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、获取事件对象的方式"}},[t._v("#")]),t._v(" 五、获取事件对象的方式")]),t._v(" "),a("p",[t._v("事件处理器的第一个参数即事件对象")]),t._v(" "),a("p",[t._v("原生的事件对象和react的事件对象不同")]),t._v(" "),a("h2",{attrs:{id:"生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("react 不推荐操作 DOM\n生命周期的覆盖 \n")])])]),a("h5",{attrs:{id:"组件内部的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件内部的生命周期"}},[t._v("#")]),t._v(" 组件内部的生命周期")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("    Will---render---Did\n")])])]),a("h4",{attrs:{id:"_1-创建阶段-component-mount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建阶段-component-mount"}},[t._v("#")]),t._v(" 1  创建阶段  component--Mount")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1   constructor(){} // 接收props  定义默认 \n   state\n2   componentWillMount(){}//组件渲染之前\n3   render(){} //组件渲染  diff算法                最小化差异\n4   coomponentDidMount(){\n     * 请求数据 \n    }//组件初始化完毕\n")])])]),a("h4",{attrs:{id:"_2-变化阶段-component-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-变化阶段-component-update"}},[t._v("#")]),t._v(" 2  变化阶段  component--Update")]),t._v(" "),a("h5",{attrs:{id:"_1-state-变化后调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-state-变化后调用"}},[t._v("#")]),t._v(" 1  state  变化后调用")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1   shouldComponentUpdate(nextProps,nextState){}\n        //组件是否因该跟新吗？ 必须要有返回值   true/false\n    return false  //不调用 render()\n    return true   //调用   render()\n       优化渲染的 \n2  componentWillUpdate(nextProps,nextState){}  //即将废弃\n        组件跟新前\n3   render(){}\n        //组件更新 diff\n4   componentDidUpdate(prevProps,prevState){}\n      组件跟新完成\n")])])]),a("h5",{attrs:{id:"_2-props"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-props"}},[t._v("#")]),t._v(" 2   props")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1    componentWillReicevedProps \n返回值是bool？\n")])])]),a("h4",{attrs:{id:"_3-销毁阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-销毁阶段"}},[t._v("#")]),t._v(" 3  销毁阶段")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1   componentWillUnMount)(){}\n子集的参数保存到自己的 state里面    cunstructor\n只执行一遍      所以渲染之后就不受父组件变化的影响\ncomponentWillRecievedProps      里面设置----可以解决\n")])])]),a("h3",{attrs:{id:"新生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新生命周期"}},[t._v("#")]),t._v(" 新生命周期")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("带will的都废弃 除了组件卸载\ngetSnapshotBeforeUpdate(){\n    return hist\n     //必须要有返回值\n     返回值作为   componentDidUpdate( nextProps,nextState,hist){\n         //  prevProps ， prevState ， hist  配合做历史记录之类的\n     }\n     的第三个参数\n}\n")])])]),a("h4",{attrs:{id:"操作真实的dom-用ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作真实的dom-用ref"}},[t._v("#")]),t._v(" 操作真实的Dom  用ref")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("dom节点上获取到的是Dom\n组件上获取到的是组件实例\nref的值有字符串和函数\n字符串是在componentDidMount里面用 this.refs.``获取真实的Dom\n值为函数时 {(dom)=>{}\n其形参就是真实的 Dom对象\n")])])]),a("h2",{attrs:{id:"react-组件通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-组件通讯"}},[t._v("#")]),t._v(" React 组件通讯")]),t._v(" "),a("h3",{attrs:{id:"组件的通讯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件的通讯"}},[t._v("#")]),t._v(" 组件的通讯")]),t._v(" "),a("blockquote",[a("p",[t._v("1 父 ==> 子  props")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let {Component}=React\nclass Son extends Component{\n    constructor(props){\n        super(props)\n       // this.change=this.change.bind(this)\n    }\n    render(){\n        this.props.参数\n\n        return <div onClick={\n           // this.change.bind(this,...arguments)\n           // ()=>{ this.change('123')  //用箭头函数传参}\n           }></div>\n    }\n    change=()=>{\n\n    }\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("ul",[a("li",[t._v("state")]),t._v(" "),a("li")]),t._v(" "),a("p",[t._v("插槽"),a("br"),t._v("\n组件的插槽里的内容显示在{this.props.children}中")])])}),[],!1,null,null,null);e.default=n.exports}}]);