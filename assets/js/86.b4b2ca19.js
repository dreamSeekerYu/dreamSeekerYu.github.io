(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{445:function(s,e,t){"use strict";t.r(e);var v=t(46),_=Object(v.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[t("strong",[s._v("REmote DIctionary Server(Redis)")]),s._v(" 是一个由Salvatore Sanfilippo写的key-value存储系统。")]),s._v(" "),t("p",[t("strong",[s._v("Redis")]),s._v("是一个"),t("strong",[s._v("开源")]),s._v("的使用"),t("strong",[t("em",[s._v("ANSI C语言编")]),s._v("写")]),s._v("、"),t("em",[t("strong",[s._v("遵守BSD协议")])]),s._v("、"),t("em",[t("strong",[s._v("支持网络")])]),s._v("、"),t("em",[t("strong",[s._v("可基于内存亦可持久化的日志型")])]),s._v("、"),t("em",[t("strong",[s._v("Key-Value数据库")])]),s._v("，"),t("em",[t("strong",[s._v("并提供多种语言的API")])]),s._v("。")]),s._v(" "),t("p",[s._v("它通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash),列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。")]),s._v(" "),t("p",[s._v("Redis 是"),t("strong",[s._v("完全开源免费的")]),s._v("，"),t("strong",[s._v("遵守BSD协议")]),s._v("，是一个"),t("strong",[s._v("高性能的key-value数据库")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("Redis支持数据的持久化")]),s._v("，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。\nRedis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。\nRedis支持数据的备份，即master-slave模式的数据备份。")]),s._v(" "),t("h4",{attrs:{id:"redis-优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-优势"}},[s._v("#")]),s._v(" "),t("strong",[s._v("Redis 优势")])]),s._v(" "),t("p",[s._v("性能极高 – Redis能"),t("strong",[s._v("读")]),s._v("的速度是"),t("strong",[s._v("110000次/"),t("em",[s._v("s")])]),s._v(","),t("strong",[s._v("写")]),s._v("的速度是"),t("strong",[s._v("81000次/"),t("em",[s._v("s")])]),s._v(" 。\n丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。\n原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。\n丰富的特性 – "),t("em",[t("strong",[s._v("Redis还支持 publish/subscribe, 通知, key 过期等等特性")])]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"redis与其他key-value存储有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis与其他key-value存储有什么不同"}},[s._v("#")]),s._v(" Redis与其他key-value存储有什么不同？")]),s._v(" "),t("p",[s._v("Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。")]),s._v(" "),t("p",[s._v("Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。")]),s._v(" "),t("h4",{attrs:{id:"redis-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-数据类型"}},[s._v("#")]),s._v(" Redis 数据类型")]),s._v(" "),t("p",[s._v("Redis支持五种数据类型："),t("em",[t("strong",[s._v("string")])]),s._v("（字符串），"),t("em",[t("strong",[s._v("hash")])]),s._v("（哈希），"),t("em",[t("strong",[s._v("list")])]),s._v("（列表），"),t("em",[t("strong",[s._v("set")])]),s._v("（集合）及zset(sorted set："),t("em",[t("strong",[s._v("有序集合")])]),s._v(")。")]),s._v(" "),t("h5",{attrs:{id:"string-字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[s._v("#")]),s._v(" String（字符串）")]),s._v(" "),t("p",[s._v("string 是 "),t("strong",[s._v("redis最基本的类型")]),s._v("，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。")]),s._v(" "),t("p",[s._v("string 类型是二进制安全的。意思是 redis 的 string可以包含任何数据。比如jpg图片或者序列化的对象。")]),s._v(" "),t("p",[s._v("string 类型是 Redis 最基本的数据类型，string 类型的值"),t("strong",[s._v("最大能存储 512MB")]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"hash-哈希"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash-哈希"}},[s._v("#")]),s._v(" Hash（哈希）")]),s._v(" "),t("p",[s._v("Redis hash 是一个"),t("strong",[s._v("键值(key=>value)对集合")]),s._v("。")]),s._v(" "),t("p",[s._v("Redis hash 是一个 string 类型的 field 和 value 的映射表，"),t("strong",[s._v("hash 特别适合用于存储对象")]),s._v("。")]),s._v(" "),t("p",[s._v("每个 hash 可以"),t("strong",[s._v("存储 2^32 -1 键值对（40多亿）")]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"list-列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[s._v("#")]),s._v(" List（列表）")]),s._v(" "),t("p",[s._v("Redis 列表是"),t("strong",[s._v("简单的字符串列表")]),s._v("，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。")]),s._v(" "),t("p",[s._v("列表最多可存储 2^32 - 1 元素 (4294967295, 每个列表可存储40多亿)。")]),s._v(" "),t("h5",{attrs:{id:"set-集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[s._v("#")]),s._v(" Set（集合）")]),s._v(" "),t("p",[s._v("Redis的Set是string类型的无序集合。")]),s._v(" "),t("p",[s._v("集合是"),t("strong",[s._v("通过哈希表实现的")]),s._v("，所以添加，删除，查找的复杂度都是O(1)。")]),s._v(" "),t("p",[t("strong",[s._v("sadd 命令")]),s._v("\n添加一个 string 元素到 key 对应的 set 集合中，成功返回1，如果元素已经在集合中返回 0，如果 key 对应的 set 不存在则返回错误。")]),s._v(" "),t("p",[s._v("集合中最大的成员数为 2^32 - 1(4294967295, 每个集合可存储40多亿个成员)。")]),s._v(" "),t("h5",{attrs:{id:"zset-sorted-set-有序集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset-sorted-set-有序集合"}},[s._v("#")]),s._v(" zset(sorted set：有序集合)")]),s._v(" "),t("p",[s._v("Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。\n不同的是每个元素都会关联一个double类型的分数。redis正是***通过分数来为集合中的成员进行从小到大的排序***。")]),s._v(" "),t("p",[t("strong",[s._v("zset的成员是唯一的,但分数(score)却可以重复")]),s._v("。")]),s._v(" "),t("p",[s._v("zadd 命令\n添加元素到集合，元素在集合中存在则更新对应score")]),s._v(" "),t("h4",{attrs:{id:"使用redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用redis"}},[s._v("#")]),s._v(" 使用Redis")]),s._v(" "),t("p",[s._v("有时候会有***中文乱码***。\n要在 redis-cli 后面加上 --raw")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("redis-cli --raw\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("注意：一个键最大能存储512MB。")]),s._v(" "),t("h5",{attrs:{id:"redis-脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-脚本"}},[s._v("#")]),s._v(" Redis 脚本")]),s._v(" "),t("p",[s._v("Redis 脚本使用 "),t("strong",[s._v("Lua 解释器来执行脚本")]),s._v("。 Redis 2.6 版本通过内嵌支持 Lua 环境。"),t("strong",[s._v("执行脚本的常用命令为 EVAL")]),s._v("。")])])}),[],!1,null,null,null);e.default=_.exports}}]);